---
heat_template_version: 2016-10-14

description: instance with/without boot on volume

parameters:
  boot_on_volume:
    type: string
  name:
    type: string
  keypair:
    type: string
  image:
    type: string
  flavor:
    type: string
  vol_size:
    type: number
  vol_type:
    type: string
  userdata:
    type: string
    default: ""
  network:
    type: string
  subnet:
    type: string
  security_group:
    type: comma_delimited_list

conditions:
  boot_on_volume: {equals : [{get_param: boot_on_volume}, "true"]}

resources:
  # conditionnal boot on volume
  root_vol:
    condition: boot_on_volume
    type: OS::Cinder::Volume
    properties:
      size: { get_param: vol_size }
      image: { get_param: image }
      volume_type: { get_param: vol_type }

  port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      fixed_ips:
        - subnet_id: { get_param: subnet }
      security_groups: { get_param: security_group }

  # conditionnal instance boot on volume
  instance_with_volume:
    condition: boot_on_volume
    type: OS::Nova::Server
    depends_on:
      - root_vol
      - port
    properties:
      name: { get_param: name}
      block_device_mapping: [{ device_name: "vda", volume_id: { get_resource: root_vol }, delete_on_termination: "true" }]
      flavor: { get_param: flavor }
      key_name: { get_param: keypair }
      networks:
        - port: { get_resource: port }
      config_drive: true
      user_data_format: RAW
      user_data:
        get_param: userdata

  # conditionnal instance boot with image
  instance:
    condition: {not: boot_on_volume}
    type: OS::Nova::Server
    depends_on:
      - port
    properties:
      name: { get_param: name}
      image: { get_param: image }
      flavor: { get_param: flavor }
      key_name: { get_param: keypair }
      networks:
        - port: { get_resource: port }
      config_drive: true
      user_data_format: RAW
      user_data:
        get_param: userdata

outputs:
  private_ip:
    value: { get_attr: [ port, fixed_ips, 0, ip_address ] }
  instance_id:
    value:
      if:
        - boot_on_volume
        - { get_resource: instance_with_volume }
        - { get_resource: instance }
  port_id:
    value: { get_resource: port }
  root_vol_id:
    value:
      if:
        - boot_on_volume
        - { get_resource: root_vol }
        - ""
